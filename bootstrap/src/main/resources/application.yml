springdoc:
  swagger-ui:
    path: /swagger-ui
  api-docs:
    path: /swagger-ui/v3/api-docs
spring:
  main:
    allow-circular-references: true
  mvc:
    pathmatch:
      matching-strategy: ANT_PATH_MATCHER
  jackson:
    property-naming-strategy: SNAKE_CASE
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  datasource:
    url: jdbc:postgresql://${ENV_DB_HOST:postgresql}:${ENV_DB_PORT:5432}/postgres?currentSchema=supos
    username: postgres
    password: ${POSTGRES_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver
    dynamic:
      primary: supos   #supos设置为默认数据源
      strict: false
      datasource:
        supos:
          url: jdbc:postgresql://${ENV_DB_HOST:postgresql}:${ENV_DB_PORT:5432}/postgres?currentSchema=supos
          username: postgres
          password: ${POSTGRES_PASSWORD:postgres}
          driver-class-name: org.postgresql.Driver
        keycloak:
          url: jdbc:postgresql://${ENV_DB_HOST:postgresql}:${ENV_DB_PORT:5432}/keycloak?currentSchema=public
          username: postgres
          password: ${POSTGRES_PASSWORD:postgres}
          driver-class-name: org.postgresql.Driver
  batch:
    jdbc:
      initializeSchema: ALWAYS
      schema: classpath*:script/*.sql
  messages:
    basename: file:/data/resource/i18n/messages
    encoding: UTF-8

mybatis:
  mapper-locations: classpath*:mapper/*.xml
  type-aliases-package: com.supos.**.dao.po
  configuration:
    map-underscore-to-camel-case: true
kong:
  host: kong
  port: 8001
node-red:
  host: ${NODE_RED_HOST:nodered}
  port: ${NODE_RED_PORT:1880}

hasura:
  url: ${HASURA_URL:http://hasura:8080/v1/metadata}

mybatis-plus:
  configuration:
    # 开启下划线转驼峰
    map-underscore-to-camel-case: true
    # 指定默认枚举类型的类型转换器
    log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl
  global-config:
    # 开启/关闭 banner 打印
    banner: false
    db-config:
      # 逻辑删除（软删除）
      logic-delete-value: NOW()
      logic-not-delete-value: 'NULL'
  # mapper路径位置
  mapper-locations: classpath*:mapper/*.xml
oauth:
  keycloak:
    realm: ${OAUTH_REALM:supos}
    client-name: ${OAUTH_CLIENT_NAME:supos}
    client-id: ${OAUTH_CLIENT_ID:supos}
    client-secret: ${OAUTH_CLIENT_SECRET:VaOS2makbDhJJsLlYPt4Wl87bo9VzXiO}
    authorization-grant-type: ${OAUTH_GRANT_TYPE:authorization_code}
    redirect-uri: ${OAUTH_REDIRECT_URI:http://office.unibutton.com:11488/inter-api/supos/auth/token}
    supos-home: ${OAUTH_SUPOS_HOME:http://office.unibutton.com:11488/home}
    issuer-uri: ${OAUTH_ISSUER_URI:http://office.unibutton.com:11488/keycloak/home/auth}
    # 刷新token的时间 单位：秒 token小于这个时间会调用refreshToken接口刷新
    refresh-token-time: ${OAUTH_REFRESH_TOKEN_TIME:60}
minio:
  endpoint: ${MINIO_ENDPOINT:http://minio:9000}
  accessKey: ${MINIO_ACCESSKEY:admin}
  secreKey: ${MINIO_SECREKEY:adminpassword}
camunda:
  bpm:
    database:
      type: postgres
    admin-user:
      id: admin  #用户名
      password: Supos@1304  #密码
    generic-properties:
      properties:
        enforceHistoryTimeToLive: false
        data-source-name: camundaDataSource
  datasource:
    url: jdbc:postgresql://${ENV_DB_HOST:postgresql}:${ENV_DB_PORT:5432}/camunda?currentSchema=public
    driver-class-name: org.postgresql.Driver
    username: postgres
    password: postgres
    hikari:
      pool-name: CamundaDataSource